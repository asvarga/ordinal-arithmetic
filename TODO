
TODO

- LEMMA: comp x y == op (comp y x) 
- refine 
	- mul
	- sub
- organize
	- pull important refinements to top
- typeclass stuff
	- make Ordinal an instance of Num and refine args to only accept NFOrds
		- essentially want "instance Num NFOrd where"
	- get Haskell + LH to automatically cast Ints to Ordinals with fromInteget it get it
	- also implement Ord with compare



LEARNED
- "not a subtype of Required type VV : {VV : GHC.Prim.Addr# | 5 < 4}" indicates a totality issue
- in case splits reiterate the preceding term during development
	- t === case _ of 
		_ -> t === s === ...
		_ -> t === r === ...
- it's easier to work case by case from the outside before doing the below




General Proving Strategy
- Manually expand terms with equational reasoning
- Turn certain terms t into (t === s) or (t ==? s ? P)
- When some "? P" is used multiple times, raise it to some location where it can be reused with a "let evidence = P in" or "let evidence = (evidence &&& P) in"


f x = case x of
	one y -> t1 ==? True ? P
	zero y -> t2 ==? True ? P









